import { useState, useEffect } from 'react';
import './UserList.css';
import { SearchIcon, EyeIcon } from './icons.jsx';

function UserList() {
    const [users, setUsers] = useState([]);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedUser, setSelectedUser] = useState(null);
    const [isFormModalOpen, setIsFormModalOpen] = useState(false);
    const [searchQuery, setSearchQuery] = useState("");

    const [formData, setFormData] = useState({
        lastName: '',
        firstName: '',
        middleName: '',
        birthDate: '',
        gender: '',
        country: '',
        city: '',
        phone: '',
        jobSpecialty: '',
        email: '',
        workplace: '',
        position: '',
        workAddress: '',
        workExperience: '',
        specialty: '',
        registrationDate: new Date().toLocaleDateString('ru-RU')
    });

    useEffect(() => {
        const storedUsers = localStorage.getItem('users');
        if (storedUsers) {
            setUsers(JSON.parse(storedUsers));
        }
    }, []);

    const handleSearchChange = (e) => {
        setSearchQuery(e.target.value);
    };

    const openUserModal = (user) => {
        setSelectedUser(user);
        setIsModalOpen(true);
    };

    const closeUserModal = () => {
        setIsModalOpen(false);
        setSelectedUser(null);
    };

    const openFormModal = () => {
        setIsFormModalOpen(true);
    };

    const closeFormModal = () => {
        setIsFormModalOpen(false);
    };

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleAddUser = () => {
        if (formData.lastName && formData.firstName && formData.email) {
            const updatedUsers = [...users, formData];
            setUsers(updatedUsers);
            localStorage.setItem('users', JSON.stringify(updatedUsers));

            setFormData({
                lastName: '', firstName: '', middleName: '', birthDate: '', gender: '', country: '', city: '', phone: '',
                jobSpecialty: '', email: '', workplace: '', position: '', workAddress: '', workExperience: '', specialty: '',
                registrationDate: new Date().toLocaleDateString('ru-RU')
            });

            closeFormModal();
        } else {
            alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
        }
    };

    const filteredUsers = users.filter(user =>
        user.firstName.toLowerCase().includes(searchQuery.toLowerCase())
    );

    return (
        <div className="app">
            <main className="main">
                <header className="header">
                    <div className="header-left">
                        <h1>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –ê–∫—Ç–∏–≤–Ω—ã–π</h1>
                    </div>
                    <div className="header-right">
                        <button className="add-button" onClick={openFormModal}>–î–æ–±–∞–≤–∏—Ç—å</button>
                        <div className="search-container">
                            <input
                                type="text"
                                placeholder="–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                                className="search-input"
                                value={searchQuery}
                                onChange={handleSearchChange}
                            />
                            <SearchIcon className="search-icon" />
                        </div>
                        <button className="admin-button">
                            <span className="admin-icon">üë§</span>
                            –ê–¥–º–∏–Ω
                        </button>
                    </div>
                </header>

                <div className="users-list">
                    {filteredUsers.map((user, index) => (
                        <div key={index} className="user-card">
                            <div className="user-avatar">
                                <img src="/src/assets/Rectangle 32.svg" alt={user.firstName} />
                            </div>
                            <div className="user-info">
                                <div className="user-primary">
                                    <h3>{user.firstName} {user.lastName}</h3>
                                    <span className="user-date">{user.registrationDate}</span>
                                </div>
                                <span className="user-workplace">{user.workplace}</span>
                                <span className="user-email">{user.email}</span>
                            </div>
                            <button className="view-button" onClick={() => openUserModal(user)}>
                                <EyeIcon className="eye-icon" />
                                –°–º–æ—Ç—Ä–µ—Ç—å
                            </button>
                        </div>
                    ))}
                </div>
            </main>

            {isFormModalOpen && (
                <div className="modal">
                    <div className="modal-content">
                        <h2>–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
                        <input className="input-modal" type="text" name="lastName" placeholder="–§–∞–º–∏–ª–∏—è" value={formData.lastName} onChange={handleChange} />
                        <input className="input-modal" type="text" name="firstName" placeholder="–ò–º—è" value={formData.firstName} onChange={handleChange} />
                        <input className="input-modal" type="text" name="middleName" placeholder="–û—Ç—á–µ—Å—Ç–≤–æ" value={formData.middleName} onChange={handleChange} />
                        <input className="input-modal" type="date" name="birthDate" value={formData.birthDate} onChange={handleChange} />
                        <input className="input-modal" type="text" name="gender" placeholder="–ü–æ–ª" value={formData.gender} onChange={handleChange} />
                        <input className="input-modal" type="text" name="country" placeholder="–°—Ç—Ä–∞–Ω–∞" value={formData.country} onChange={handleChange} />
                        <input className="input-modal" type="text" name="city" placeholder="–ì–æ—Ä–æ–¥" value={formData.city} onChange={handleChange} />
                        <input className="input-modal" type="text" name="phone" placeholder="–ú–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω" value={formData.phone} onChange={handleChange} />
                        <input className="input-modal" type="text" name="jobSpecialty" placeholder="–†–∞–±–æ—á–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å" value={formData.jobSpecialty} onChange={handleChange} />
                        <input className="input-modal" type="email" name="email" placeholder="–ü–æ—á—Ç–∞" value={formData.email} onChange={handleChange} />
                        <input className="input-modal" type="text" name="workplace" placeholder="–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã" value={formData.workplace} onChange={handleChange} />
                        <input className="input-modal" type="text" name="position" placeholder="–î–æ–ª–∂–Ω–æ—Å—Ç—å" value={formData.position} onChange={handleChange} />
                        <input className="input-modal" type="text" name="workAddress" placeholder="–ê–¥—Ä–µ—Å" value={formData.workAddress} onChange={handleChange} />
                        <textarea className="input-modal" name="workExperience" placeholder="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã" value={formData.workExperience} onChange={handleChange} />
                        <button className="cancel-button" onClick={closeFormModal}>–û—Ç–º–µ–Ω–∏—Ç—å</button>
                        <button className="next-button" onClick={handleAddUser}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    </div>
                </div>
            )}

            {isModalOpen && selectedUser && (
                <div className="modal">
                    <div className="modal-content">
                        <h2>–û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</h2>
                        <div className={"main-div"}>
                            <img src="/src/assets/Rectangle 32.svg" alt="User Avatar" className="user-avatar2" />
                            <p><strong>–§–∞–º–∏–ª–∏—è:</strong> {selectedUser.lastName}</p>
                            <p><strong>–ò–º—è:</strong> {selectedUser.firstName}</p>
                            <p><strong>–û—Ç—á–µ—Å—Ç–≤–æ:</strong> {selectedUser.middleName}</p>
                        </div>
                        <p><strong>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</strong> {selectedUser.birthDate}</p>
                        <p><strong>–ü–æ–ª:</strong> {selectedUser.gender}</p>
                        <p><strong>–°—Ç—Ä–∞–Ω–∞:</strong> {selectedUser.country}</p>
                        <p><strong>–ì–æ—Ä–æ–¥:</strong> {selectedUser.city}</p>
                        <p><strong>–ê–¥—Ä–µ—Å:</strong> {selectedUser.workAddress}</p>
                        <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {selectedUser.phone}</p>
                        <p><strong>Email:</strong> {selectedUser.email}</p>
                        <p><strong>–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:</strong> {selectedUser.workplace}</p>
                        <p><strong>–†–∞–±–æ—á–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</strong> {selectedUser.jobSpecialty}</p>
                        <button className="cancel-button" onClick={closeUserModal}>–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                </div>
            )}
        </div>
    );
}

export default UserList;
